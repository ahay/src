import os, sys, re, string, types
sys.path.append('../../framework')
import bldutil

progs = '''
agc aliasp bandpass bin bin1 boxsmooth canny causint clip clip2 cmatmult cmatmult2 cosft costaper deriv dipfilter dwt enoint2 expl2 extract fern fft1 fft3 grad2 grad3 heat histogram igrad impl2 intshow inttest1 inttest2 inttest3 iwarp jacobi lapfill laplac linear linefit lorenz lpad mandelbrot matmult max1 monof mutter noise otsu postfilter2 pow reg2tri remap1 roots shapebin1 sharpen slice smooth smoothder smoothreg2 spectra spectra2 spline splinefilter t2warp threshold trapez tri2reg trirand trishape unif2 unif3
'''

# hlinfilter

try:  # distributed version
    Import('env root pkgdir libdir bindir')
    env = env.Clone()
    alias = {'pow':'tpow'}
except: # local version
    env = bldutil.Debug()
    root = None
    SConscript('../../api/c/SConstruct')

src = Glob('[a-z]*.c')
src.remove(File('predicates.c'))

dynlib = env.get('DYNLIB','')

env.Prepend(CPPPATH=['../../include'],
            LIBPATH=['../../lib'],
            LIBS=[dynlib+'rsf'])

fftw = env.get('FFTW')
if fftw:
    env.Prepend(CPPDEFINES=['SF_HAS_FFTW'])
    fftwomp = env.get('FFTWOMP')
    if fftwomp:
        env.Prepend(CPPDEFINES=['SF_HAS_FFTW_OMP'])

lapack = env.get('LAPACK')
if lapack:
    env.Prepend(CPPDEFINES=['SF_HAS_LAPACK'])

for source in src:
    inc = env.RSF_Include(source,prefix='')
    obj = env.StaticObject(source)
    env.Ignore(inc,inc)
    env.Depends(obj,inc)

mains = Split(progs)

docalias = {}
for prog in mains:
    sources = ['M' + prog]
    bldutil.depends(env,sources,'M'+prog)
    main = env.Program(prog,[x + '.c' for x in sources])
    if root:
        install = env.Install(bindir,main[0])

        if dynlib and env['PLATFORM'] == 'darwin':
             env.AddPostAction(install,
             '%s -change build/api/c/libdrsf.dylib '
             '%s/libdrsf.dylib %s' % \
             (WhereIs('install_name_tool'),libdir,install[0]))

        if prog in list(alias.keys()):
            other = str(main[0]).replace(prog,alias[prog])
            install = env.InstallAs(os.path.join(bindir,other),main[0])

            if dynlib and env['PLATFORM'] == 'darwin':
                env.AddPostAction(install,
                '%s -change build/api/c/libdrsf.dylib '
                '%s/libdrsf.dylib %s' % \
                (WhereIs('install_name_tool'),libdir,install[0]))

            if env['PLATFORM'] == 'cygwin':
                other = other.replace('.exe','')
            docalias[other] = 'sf'+prog

######################################################################
# SELF-DOCUMENTATION
######################################################################
if root:
    main = 'sfgeneric.py'
    
    docs = [env.Doc(prog,'M' + prog) for prog in mains]
    env.Depends(docs,'#/framework/rsf/doc.py')	
    doc = env.RSF_Docmerge(main,docs,alias=docalias)
    
    env.Install('../../framework/rsf',doc)
    env.Install(pkgdir,doc)
