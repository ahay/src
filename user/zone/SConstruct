import os, sys, re, string
sys.path.append('../../framework')
import bldutil

progs = '''
kirmod_newton time2depthweak vtihti2ort
'''

# gausssource rays3a quarticlayer quartic expand3 vtihti2ort cij2moveout
 
#iwarpsh stolthhlin radialhlin nmo3gmaprep 
#fdtti3delasticcij nmo3gmaprep

ccprogs = '''
'''

#decomp = ['rickerjb.o','eigen3x3.o','decomplowrank.o','fdcoef.o','fwportelasticcij.o','fwpttielasticcij.o','kykxkztaper.o','puthead.o','vmodel.o','zero.o']

try:  # distributed version
    Import('env root pkgdir bindir')
    env = env.Clone()
except: # local version
    env = bldutil.Debug()
    root = None
    SConscript('../lexing/SConstruct')
    
env.Prepend(CPPPATH=['../../include'],
            LIBPATH=['../../lib'],
            LIBS=[env.get('DYNLIB','')+'rsf'])

##############################################################################
# Compiling 
##############################################################################

src = Glob('[a-z]*.c')
underscore_inc = Glob('_[a-z]*.h')
objs = []

##############################################################################
# ADD FFTW3 LIB
##############################################################################

fftw = env.get('FFTWOMP')
if fftw:
    env.Prepend(CPPDEFINES=['SF_HAS_FFTW'])

########################################################################
# C progs and MPI
########################################################################

env.Prepend(CPPPATH=['../../include'],
            LIBPATH=['../../lib'],
            LIBS=[env.get('DYNLIB','')+'rsf'])

for source in src:
    inc = env.RSF_Include(source,prefix='')
    if not source in Glob('mpi*.c'):
        obj = env.StaticObject(source)
        env.Depends(obj,inc)
        env.Depends(obj,underscore_inc)
      #if obj[0].name in decomp:
        #	objs.append(obj)

mpicc = env.get('MPICC')

mains = Split(progs)
for prog in mains:
    sources = ['M' + prog]
    bldutil.depends(env,sources,'M'+prog)
    if prog[:3] == 'mpi':
        if mpicc:
            prog = env.Program(prog,[x + '.c' for x in sources],CC=mpicc)
        else:
            prog = env.RSF_Place('sf'+prog,None,var='MPICC',package='mpi')
    else:
        if prog != 'vtihti2ort' or env.get('LAPACK'):
            prog = env.Program(prog,[x + '.c' for x in sources])
        else:
            prog = env.RSF_Place('sf'+prog,None,var='LAPACK',package='lapack')
    if root:
        env.Install(bindir,prog)

########################################################################
# C++ progs 
########################################################################

dynpre = env.get('DYNLIB','') 
libs = [dynpre+'rsf']+env.get('LIBS',[])

if 'c++' in env.get('API',[]):
    lapack = env.get('LAPACK')
else:
    lapack = None

if lapack:
    libsxx = [dynpre+'rsf++','vecmatop']
    if not isinstance(lapack,bool):
        libsxx.extend(lapack)
    libsxx.extend(libs)

ccmains = Split(ccprogs)
for prog in ccmains:
    sources = ['M' + prog]
    cancompile = lapack and fftw
    if cancompile:
        prog = env.Program(prog, [x + '.cc' for x in sources]+objs, 
                           LIBS=libsxx)
    else:
        prog = env.RSF_Place('sf'+prog,None,var='LAPACK',package='lapack')
    if root:
        env.Install(bindir,prog)

########################################################################
# SELF-DOCUMENTATION
######################################################################
if root:
    user = os.path.basename(os.getcwd())
    main = 'sf%s.py' % user
    
    docs = [env.Doc(prog,'M' + prog) for prog in mains] + \
           [env.Doc(prog,'M%s.cc' % prog,lang='c++') for prog in ccmains] 
    env.Depends(docs,'#/framework/rsf/doc.py')	

    doc = env.RSF_Docmerge(main,docs)
    env.Install(pkgdir,doc)
