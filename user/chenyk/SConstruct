import os, sys, re, string
sys.path.append('../../framework')
import bldutil

progs = '''
dispelem diff mulawefd2d emd norm blend xcorr matoper lesolver pclipc2
dwtdenoise trisolver symposolver seiscut seisthr Testsolver
Testsolver1 trapepass lagrange heatexplitest heatimplitest hyperdif
zerotrace hilbert cdivdir cabs cemd1 cemd2 snr2 snr3 snrcyk preerror
threshold1 tsmf fxdecon simidenoise bin2rsf rsf2bin halfthr hradon
suplane simidenoise1 rmtrace prekirch psmig pocssemb afd2d
prekirchsr simpostkirch presr nlm1 nlm2 dblendseis svmf genshotscyk dip_fb dipn_fb dipl dipln selfblend ycvelxf ycvelinvww afd2domp low addtrace matlr pnmomf expd ltfts ltftn fxynpre fxynpre2
orthol orthon orthonc orthoa smoothn warpscann dipn efd3dmt sint2 sint3 eikonal_rtp eikonal_surf eikonal_surf_dv1d txt2rsf rsf2txt npef5_recon aps3d
'''
ccprogs = 'diffcxx'

# broken: npef5 aps3d

# mutter3 aps3d npef5

mpiprogs='''
mpiafdfwi2d 
'''#mpiafdfwi3d (not finished yet)

cprogs = '''
cqrtm
'''

tprogs='''
clapack cblas csolver eno1 eno2 eno3 spline fft2 
'''

pyprogs='''
pyran
'''
pymods='''

'''

docs = []

try: # distributed version
    Import('env root pkgdir bindir')
    env = env.Clone()
except: # local version
    env = bldutil.Debug()
    root = None
    SConscript('../pwd/SConstruct')
src = Glob('[a-z]*.c')
dynpre = env.get('DYNLIB','') 

libs = [dynpre+'rsf']+env.get('LIBS',[])
dlibs = ['drsf']+env.get('LIBS',[])

lapack = env.get('LAPACK')

env.Prepend(CPPPATH=['../../include'],
            LIBPATH=['../../lib'],
            LIBS=[dynpre+'rsfpwd',dynpre+'rsf'])
#env.Prepend(LIBS='fftw3')

for source in src:
    inc = env.RSF_Include(source,prefix='')
    obj = env.StaticObject(source)
    env.Ignore(inc,inc)
    env.Depends(obj,inc)

######################################################################
#USING PETSC (One should specify the absolute dir in petsccpp and petsclib.)
######################################################################

petsccpp=os.environ.get("PETSCCPP")
petsclib=os.environ.get("PETSCLIB")

if petsclib:
    env.Prepend(CPPPATH=[petsccpp],
            LIBPATH=[petsclib],
            LIBS='')
    libs = [libs, 'petsc']

######################################################################
# Compiling main programs
######################################################################

mains = Split(progs)
for prog in mains:
    sources = ['M' + prog]
    bldutil.depends(env,sources,'M'+prog)
    prog = env.Program(prog,[x + '.c' for x in sources])
    if root:
        env.Install(bindir,prog)

######################################################################
# Compiling c++ programs
######################################################################


ccmains = Split(ccprogs)
for prog in ccmains:
    sources = ['M' + prog]
    if 'c++' in env.get('API',[]):
        prog = env.Program(prog,[x + '.cc' for x in sources],
                           LIBS=[dynpre+'rsf++']+libs)
        if root:
            install = env.Install(bindir,prog)
            
            if dynpre and env['PLATFORM'] == 'darwin':
                env.AddPostAction(install,
                                  '%s -change build/api/c/libdrsf.dylib '
                                  '%s/libdrsf.dylib %s' % \
                                  (WhereIs('install_name_tool'),libdir,install[0]))
                env.AddPostAction(install,
                                  '%s -change build/api/c++/libdrsf++.dylib '
                                  '%s/libdrsf++.dylib %s' % \
                                  (WhereIs('install_name_tool'),libdir,install[0]))
    else:
        prog = env.RSF_Place('sf'+prog,None,package='c++')
        if root:
            env.Install(bindir,prog)

######################################################################
# Compiling mpi programs ("MPILIB MPICPP" is user defined.)
######################################################################
mpicc  = env.get('MPICC')
mpicxx = env.get('MPICXX')
mpi_src = Glob('Q[a-z]*.c')
for source in mpi_src:
    inc = env.RSF_Include(source,prefix='')
    env.Ignore(inc,inc)
    if mpicc:
        obj = env.StaticObject(source,CC=mpicc)
        env.Depends(obj,inc)

mpimains = Split(mpiprogs)
for prog in mpimains:
    sources = ['M' + prog]
    bldutil.depends(env,sources,'M'+prog)
    if mpicc:
        env.StaticObject('M'+prog+'.c',CC=mpicc)
        #for distributed FFTW3
        #prog = env.Program(prog,map(lambda x: x + '.o',sources),CC=mpicc,LIBS=env.get('LIBS')+['fftw3f_mpi'])
        prog = env.Program(prog,[x + '.o' for x in sources],CC=mpicc)
    else:
        prog = env.RSF_Place('sf'+prog,None,var='MPICC',package='mpi')
    if root:
        env.Install(bindir,prog)

######################################################################
# compiling CUDA programs
######################################################################
CTP = env.get('CUDA_TOOLKIT_PATH')
NVCC = env.get('NVCC')

import os
mpicc = os.environ.get('MPICC')
mpilib = os.environ.get('MPILIB')

cuda_mains = Split(cprogs)
for prog in cuda_mains:
    if CTP and NVCC and mpicc and mpicpp and mpilib:
        cfile = env.Command('CUDA'+prog+'.c','M'+prog+'.cu','cp $SOURCE $TARGET')
        cc = env.get('CC')
        cflags = env.get('CUDAFLAGS')
        ldflags = '-lcublas -lcufft -lcusparse'
        if str.rfind(cc,'icc') >= 0:
            cflags = cflags + ' -ccbin=%s' % cc
            ldflags = '-ccbin=%s' % cc
        prog = env.Program(prog,cfile,
                           CC=NVCC,
                           CPPPATH=[mpicpp]+env.get('CPPPATH'),
                           LIBPATH=[mpilib]+env.get('LIBPATH'),
                           LIBS=['mpi']+env.get('LIBS'),
                           LINKFLAGS=ldflags,
                           CFLAGS=cflags)
    else:
        prog = env.RSF_Place('sf'+prog,None,
                             message='''
                             Please check if CUDA is not missing and is installed correctly.
                             Rerun Madagascar installation after it has been fixed.
                             ''')
    if root:
        env.Install(bindir,prog)
        
######################################################################
# Compiling testing programs
######################################################################

tmains = Split(tprogs)
for prog in tmains:
    if lapack:
    	sources = ['Test' + prog]
    	if prog=='clapack':
           sources.append('solver')
    	bldutil.depends(env,sources,'Test'+prog)
    	sources = [x + '.o' for x in sources]
    	env.Object('Test' + prog + '.c')
    	prog=env.Program(sources,PROGPREFIX='',PROGSUFFIX='.x',LIBS=libs)

######################################################################
# PYTHON METAPROGRAMS (python API not needed)
######################################################################

if root: # no compilation, just rename
	pymains = Split(pyprogs)
	exe = env.get('PROGSUFFIX','')
	for prog in pymains:
		env.InstallAs(os.path.join(bindir,'sf'+prog+exe),'M'+prog+'.py')
	bldutil.install_py_modules(env,Split(pymods),pkgdir)

######################################################################
# SELF-DOCUMENTATION
######################################################################
if root:
	user = os.path.basename(os.getcwd())
	main = 'sf%s.py' % user
	
	docs += [env.Doc(prog,'M' + prog) for prog in mains]  + \
           [env.Doc(prog,'M%s.cc' % prog,lang='c++') for prog in ccmains] + \
           [env.Doc(prog,'M' + prog) for prog in mpimains] + \
		[env.Doc(prog,'M'+prog+'.py',lang='python') for prog in pymains]
	env.Depends(docs,'#/framework/rsf/doc.py')	
	doc = env.RSF_Docmerge(main,docs)
	env.Install(pkgdir,doc)
