import os, sys, re, string
sys.path.append('../../framework')
import bldutil

progs = '''
apef apefsignoi convert0eq difference domf findrefmax1 findzeroendt fkoclet fourmis2 freshape fxspfdenoise2 fxspfint2 fxyspfdenoise3 fxyspfint3 gravcon invqfilt iq2eq lcf lcfseq lcfsiq lineslope lpfdenoise2 ltft lum mean mf mig2 miss4 miss43 modatten1 modtraceq mtm multiple mvo oshift1 pick31 pwsmooth3 recoverfulleq saltpepper seisbreg2 spefcstep spefvstep st stft sv2d svd svddenoise theoreqiq threshold2 tvmf txrna2 txrna3 txsorth txspf txspfint2 txspfvsint2 txyspfint3 txyspfvsint3 v2d
'''

try:  # distributed version
    Import('env root pkgdir bindir')
    env = env.Clone()
except: # local version
    env = bldutil.Debug()
    root = None
    SConscript('../pwd/SConstruct')

src = Glob('[a-z]*.c')

env.Prepend(CPPPATH=['../../include'],
            LIBPATH=['../../lib'],
            LIBS=[env.get('DYNLIB','')+'rsfpwd',
                  env.get('DYNLIB','')+'rsf'])

for source in src:
    inc = env.RSF_Include(source,prefix='')
    obj = env.StaticObject(source)
    env.Ignore(inc,inc)
    env.Depends(obj,inc)

mains = Split(progs)
for prog in mains:
    sources = ['M' + prog]
    bldutil.depends(env,sources,'M'+prog)
    prog = env.Program(prog,[x + '.c' for x in sources])
    if root:
        env.Install(bindir,prog)

######################################################################
# SELF-DOCUMENTATION
######################################################################
if root:
    user = os.path.basename(os.getcwd())
    main = 'sf%s.py' % user
    
    docs = [env.Doc(prog,'M' + prog) for prog in mains]
    env.Depends(docs,'#/framework/rsf/doc.py')	
    doc = env.RSF_Docmerge(main,docs)
    env.Install(pkgdir,doc)

