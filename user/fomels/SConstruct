import os, sys, re, string
sys.path.append('../../framework')
import bldutil

progs = '''
abalance analytical angle angle2 approx arrival bdix beamform1 bil1
bilat2 blur boxcascade cbeamform1 causinv ccausint cchebyshevp
cfftexpa-dev cfftwave1 cdivn cflow chain2dfft chebvc chebyshev
chebyshevp clpf cltft cltftfft constperm constpermh constpermh1
convection cosftwave1 cpef cr ctf2dprec deblur diphase distance divn
dix donut dpeiko eikonal eikonalvti eno2 erf exgr fedchain fedchain1
fedchain2 fedchain21 fft2 fftexp0 fftexp1 fftexp3 fftexpa fftexp0a
fftone ffttest fftwave1 fftwave2 fftwave3 findmin2 focus fpow freqest
gaussmooth gbeamform imray interf interp2 interpt iphase kdsort kdtree
kron label legacy lfftexp0 llpf localskew locov lpf lrmig0 lsfit max2
median mffit mig3 miss3 morph nconv nnint nnshape nnshapet nsmooth
nsmooth1 ocparcel octentwt ofilp ofsemb ortho patch pchain pchain1
phaserot pick pick2 pick3 plane poly polyfit psmig2 regr rdiv rect1
reshape riesz rsin sc seislet1 semblance semblancew shape shapeagc
shapefill shearer shift1 sh1 sh2 similarity similarity2 simenv
slschain2d smoothderw smoothreg smspray stfchain stfchain2 stcontrib
stltft stpf stphase stream streamiss sttimefreq taupfit tfchain
tf2dprec thin timecont timefreq tomo tree trace2 tricascade tristack
tristack2 twofreq2 upgrad var2 velcon velinv vipmig0 vofzperm warp1
warpadd warpscan zero zmarch ztrace
'''

ccprogs = 'anisolr2 isolr2 isolr3 lrvc0 permlr1 permlr2 permlr3'

pyprogs = 'shuffle3 cgi fft ipick las2rsf matplotlib results wxipick wxresults zoom wxzoom twolayer onelayer'
pymods = 'conjdir conjgrad dottest steepd'

try:  # distributed version
    Import('env root pkgdir bindir libdir incdir')
    env = env.Clone()
except: # local version
    env = bldutil.Debug()
    root = None
    SConscript('../lexing/SConstruct')

src = Glob('[a-z]*.c')

env.Prepend(CPPPATH=['../../include'],
            LIBPATH=['../../lib'])

fftw = env.get('FFTW')
if fftw:
    env.Prepend(CPPDEFINES=['SF_HAS_FFTW'])

dynpre = env.get('DYNLIB','') 

libs = [dynpre+'rsf']+env.get('LIBS',[])
dlibs = ['drsf']+env.get('LIBS',[])

objects = []
dobjects = []
includes = []
for source in src:
    inc = env.RSF_Include(source,prefix='')
    obj = env.StaticObject(source)
    env.Ignore(inc,inc)
    env.Depends(obj,inc)
        
mains = Split(progs)
for prog in mains:
    sources = ['M' + prog]
    bldutil.depends(env,sources,'M'+prog)
    env.StaticObject('M'+prog+'.c')
    prog = env.Program(prog,[x + '.o' for x in sources],LIBS=libs)
    if root:
        install = env.Install(bindir,prog)

        if dynpre and env['PLATFORM'] == 'darwin':
            env.AddPostAction(install,
            '%s -change build/api/c/libdrsf.dylib '
            '%s/libdrsf.dylib %s' % \
                (WhereIs('install_name_tool'),libdir,install[0]))

if 'c++' in env.get('API',[]):
    lapack = env.get('LAPACK')
else:
    lapack = None

if lapack:
    libsxx = [dynpre+'rsf++','vecmatop']
    if not isinstance(lapack,bool):
        libsxx.extend(lapack)
    libsxx.extend(libs)

ccmains = Split(ccprogs)
for prog in ccmains:
    sources = ['M' + prog]
    if lapack:
        prog = env.Program(prog,[x + '.cc' for x in sources],LIBS=libsxx)
        if root:
            install = env.Install(bindir,prog)
            
            if dynpre and env['PLATFORM'] == 'darwin':
                env.AddPostAction(install,
                '%s -change build/api/c/libdrsf.dylib '
                '%s/libdrsf.dylib %s' % \
                (WhereIs('install_name_tool'),libdir,install[0]))
                env.AddPostAction(install,
                '%s -change build/api/c++/libdrsf++.dylib '
                '%s/libdrsf++.dylib %s' % \
                (WhereIs('install_name_tool'),libdir,install[0]))
    else:
        prog = env.RSF_Place('sf'+prog,None,var='LAPACK',package='lapack')
        if root:
            env.Install(bindir,prog)

jpeg = env.get('JPEG')
if jpeg:
    jpeg_o = env.StaticObject('_jpeg.c')
    env.Depends(jpeg_o,'_jpeg.h')

for conv in ('byte2jpg','jpg2byte'):
    if jpeg:
        prog = env.Program('sf'+conv,['_%s.c' % conv,jpeg_o],LIBS=libs+[jpeg])
    else:
        prog = env.RSF_Place('sf'+conv,None,var='JPEG',
                             package='libjpeg-devel')
    if root:
        env.Install(bindir,prog)

tiff = env.get('TIFF')

for conv in ('byte2tif','tif2byte'):
    if tiff:
        prog = env.Program('sf'+conv,'_%s.c' % conv,LIBS=libs+[tiff])
    else:
        prog = env.RSF_Place('sf'+conv,None,var='TIFF',package='libtiff-devel')
    if root:
        env.Install(bindir,prog)

for prog in Split('agrid burg cburg chebyshev cosft3 fchain grid1 nsmooth1 pcg sfchain smspray spray'):
    sources = ['Test' + prog,prog]
    bldutil.depends(env,sources,prog)
    sources = [x + '.o' for x in sources]
    env.Object('Test' + prog + '.c')
    env.Program(sources,PROGPREFIX='',PROGSUFFIX='.x',LIBS=libs)

######################################################################
# PYTHON METAPROGRAMS (python API not needed)
######################################################################

if root: # no compilation, just rename
    pymains = Split(pyprogs)
    exe = env.get('PROGSUFFIX','')
    for prog in pymains:
        binary = os.path.join(bindir,'sf'+prog+exe)
        env.InstallAs(binary,'M'+prog+'.py')
        env.AddPostAction(binary,Chmod(str(binary),0o755))
    for mod in Split(pymods):
        env.Install(pkgdir,mod+'.py')

######################################################################
# SELF-DOCUMENTATION
######################################################################
if root:
    user = os.path.basename(os.getcwd())
    main = 'sf%s.py' % user
    
    docs = [env.Doc(prog,'M' + prog) for prog in mains] +  \
           [env.Doc(prog,'M%s.cc' % prog,lang='c++') for prog in ccmains] + \
           [env.Doc(prog,'_' + prog) for prog in ['byte2jpg','jpg2byte']] + \
           [env.Doc(prog,'_' + prog) for prog in ['byte2tif','tif2byte']] + \
           [env.Doc(prog,'M'+prog+'.py',lang='python') for prog in pymains]
    env.Depends(docs,'#/framework/rsf/doc.py')	

    doc = env.RSF_Docmerge(main,docs)
    env.Install(pkgdir,doc)
