import os, sys, re, string
sys.path.append('../../framework')
import bldutil

progs = '''
datasucjb2rsf2d kine2dvti ort3de ort3dhomodevK ort3dhomodevcK ort3dpseudophomo resamp tti2de tti2desep tti2dpseudop tti3de twolayer2dti twolayer3dort twolayer3dti vti2desep vti2dpseudop vti2dpseudop1 vti2dpseudopfvs0 vti2dpseudosv vti3de vti3dpseudosh vti3dpseudosv
'''

ccprogs = '''
ort3devectorlrkspace_double tti2dekspacelr tti2dekspacelrsource tti2delr tti2delrdec tti2delrdecomp tti2delrdecomp2p tti2delrsep tti2delrsep2p tti2devectorlrsvd tti2devectorlrsvd_double tti2devectorlrsvdkspace_double tti2devectorlrsvdkspace_double_stiffness tti2dpseudoplrsep tti2dpseudosvlrsep tti3delrsepP tti3delrsepSH tti3delrsepSV vti3delrsepP vti3delrsepSH vti3delrsepSV
'''

pyprogs ='''
'''
 
pymods = '''
'''

tprogs = '''
fftw
'''

subs = '''
'''

try:  # distributed version
    Import('env root pkgdir bindir libdir incdir')
    env = env.Clone()
except: # local version
    env = bldutil.Debug()
    root = None
    SConscript('../lexing/SConstruct')  # include lexing's head and lib files
#    SConscript('../../api/c++/SConstruct')

env.Prepend(CPPPATH=['../../include'],
            LIBPATH=['../../lib'],
            LIBS=[env.get('DYNLIB','')+'rsf'])


##############################################################################
# Compiling C programs 
##############################################################################
src = Glob('[a-z]*.c')
underscore_inc = Glob('_[a-z]*.h')
objs = []

##############################################################################
# ADD FFTW3 LIB
##############################################################################
fftw = env.get('DFFTWOMP')
if fftw:
    env.Prepend(CPPDEFINES=['SF_HAS_FFTW'])
    if not isinstance(fftw,bool):
        env.Append(LIBS=fftw)
    fftw = env.get('DFFTW')
    if not isinstance(fftw,bool):
        env.Append(LIBS=fftw)
    
# files with FFTW dependence
fftwfiles = 'seplowrank decomplowrank spectramultipy sepdivcurl fwpvtielowrank fwpvtielowrank.double'
fftws = [File(x+'.c') for x in Split(fftwfiles)]

lapack = env.get('LAPACK')

for source in src:
    inc = env.RSF_Include(source,prefix='')
    if fftw or not source in fftws:
        obj = env.StaticObject(source)
        env.Depends(obj,inc)
        env.Depends(obj,underscore_inc)
        objs.append(obj)

mains = Split(progs)
for prog in mains:
    sources = ['M' + prog]
    bldutil.depends (env, sources, 'M'+prog)
    if (fftw or not prog in Split('tti2delrseparation vti2delrseparation')) \
        and (lapack or not prog in Split('ort3dhomodevK')):
        env.StaticObject('M'+prog+'.c')
        prog = env.Program (prog, [x + '.c' for x in sources])
    else:
        prog = env.RSF_Place('sf'+prog,None,var='FFTW',package='fftw-devel')
    if root:
        env.Install (bindir, prog)

##############################################################################
# Compiling C++ programs 
##############################################################################

dynpre = env.get('DYNLIB','') 
libs = env.get('LIBS',[])

if not 'c++' in env.get('API',[]):
    lapack = None

if lapack:
    libsxx = [dynpre+'rsf++','vecmatop']
    if not isinstance(lapack,bool):
        libsxx.extend(lapack)
    libsxx.extend(libs)

ccmains = Split(ccprogs)
for prog in ccmains:
    sources = ['M' + prog]
    cancompile = lapack and (fftw or not prog in Split('''
    tti2delrdecomp tti2delrdecomp1p tti2delrdecomp2p tti2dedivcurl
    tti2delrsep tti2delrsep1p tti2delrsep2p tti2delrsep2pTrueAmp
    tti2delrsep2ps tti2dpseudoplrsep tti2dpseudosvlrsep tti3delrsep
    tti3delrsephomo vti2delrsep vti2delrsep2ps vti2delrsepTrueAmp
    tti3delrsepP tti3delrsepSH tti3delrsepSV tti3delrdecompP
    tti3delrdecompSV vti2dpseudoplrsep vti2dpseudoplrsep1
    vti2dpseudoplrseprtm tti2desep vti2dpseudosvlrsep vti3dedivcurl
    vti3delrdecompP vti3delrsep tti2devectorlrsvd_double
    vti3delrsephomo vti3delrsephomo vti3delrsephomoP tti2delrdec
    tti2devectorlrsvd vti2delrsep2p vti3delrsepP vti3delrsepSV
    vti3delrsepSH tti2delr tti2devectorlrsvdkspace_double ort3delrsep
    ort3devectorlrkspace_double tti2dekspacelr tti2dekspacelrsource
    tti2devectorlrsvdkspace_double_stiffness
    '''))
    if cancompile:
        prog = env.Program(prog, [x + '.cc' for x in sources]+objs, 
                           LIBS=libsxx)
    else:
        prog = env.RSF_Place('sf'+prog,None,var='LAPACK',package='lapack')
    if root:
        env.Install(bindir,prog)

##############################################################################
# Compiling C programs (Test)
##############################################################################
if fftw:
    for prog in Split(tprogs):
        sources = ['T'+prog]
        bldutil.depends(env,sources,'T'+prog)     
        env.StaticObject('T'+prog+'.c')
        prog = env.Program(prog,[x + '.o' for x in sources],PROGPREFIX='T',PROGSUFFIX='.x')
        
######################################################################
# SELF-DOCUMENTATION
######################################################################
if root:
    user = os.path.basename(os.getcwd())
    main = 'sf%s.py' % user
    
    docs = [env.Doc(prog,'M' + prog) for prog in mains] +  \
           [env.Doc(prog,'M%s.cc' % prog,lang='c++') for prog in ccmains] 
    env.Depends(docs,'#/framework/rsf/doc.py')	

    doc = env.RSF_Docmerge(main,docs)
    env.Install(pkgdir,doc)
