import os, sys, re, string, glob
sys.path.append('../../framework')
import bldutil

progs = '''
brfault fwidir fwigrad fwiobj fwipe fwiupdate pad2 padfault unfault
'''

ccprogs = ''

mpi_progs = '''
mpisfwi
'''

# mpifwigrad mpilsLU

pyprogs = 'fdlsrtm lrrtm'

try:  # distributed version
    Import('env root pkgdir bindir libdir incdir')
    env = env.Clone()
except: # local version
    env = bldutil.Debug()
    root = None
    SConscript('../pwd/SConstruct')

src = Glob('[a-z]*.c')

sparsepath = env.get('SPARSEPATH')
sparselibs = env.get('SPARSELIBS')

env.Prepend(CPPPATH=['../../include'],
            LIBPATH=['../../lib'],
            LIBS=[env.get('DYNLIB','')+'rsfpwd',
				  env.get('DYNLIB','')+'rsf'])

fftw = env.get('FFTWOMP')
if fftw:
    env.Prepend(CPPDEFINES=['SF_HAS_FFTW'])

if sparsepath and sparselibs:
    env.Prepend(CPPPATH=sparsepath,
                LIBS=sparselibs)

if not sparsepath or not sparselibs:
    for filec in Split('''
        fdprep fdprep25 fdprep5 fdprep9 fdprep9o sparsesolver 
        '''):
        source = File(filec+'.c')
        inc = env.RSF_Include(source,prefix='')
        env.Ignore(inc,inc)
        src.remove(source)

mpicc = env.get('MPICC')
mpi_src = Glob('P[a-z]*.c')
for source in mpi_src:
    inc = env.RSF_Include(source,prefix='')
    obj = env.StaticObject(source,CC=mpicc)
    env.Ignore(inc,inc)
    env.Depends(obj,inc)

for source in src:
    inc = env.RSF_Include(source,prefix='')
    obj = env.StaticObject(source)
    env.Ignore(inc,inc)
    env.Depends(obj,inc)

mains = Split(progs)
for prog in mains:
    sources = ['M' + prog]
    #prog = env.Program(prog,map(lambda x: x + '.c',sources))

    if (prog != 'fftfwi_sparse_2d' and prog != 'fwigrad' and prog != 'fwiobj') or (sparsepath and sparselibs):
        bldutil.depends(env,sources,'M'+prog) # Compile
        env.StaticObject('M'+prog+'.c') # Compile
        prog = env.Program(prog,[x + '.o' for x in sources]) # Link
    else:
        prog = env.RSF_Place('sf'+prog,None,var='SPARSELIBS',
                             package='suitesparse')

    if root:
        env.Install(bindir,prog)

mpi_mains = Split(mpi_progs)
for prog in mpi_mains:
    sources = ['M' + prog]
    bldutil.depends(env,sources,'M'+prog)
    if mpicc:
        env.StaticObject('M'+prog+'.c',CC=mpicc)
        prog = env.Program(prog,[x + '.o' for x in sources],CC=mpicc)
    else:
        prog = env.RSF_Place('sf'+prog,None,var='MPICC',package='mpi')
    if root:
        env.Install(bindir,prog)


######################################################################
# PYTHON METAPROGRAMS (python API not needed)
######################################################################

if root: # no compilation, just rename
    pymains = Split(pyprogs)
    exe = env.get('PROGSUFFIX','')
    for prog in pymains:
        binary = os.path.join(bindir,'sf'+prog+exe)
        env.InstallAs(binary,'M'+prog+'.py')
        env.AddPostAction(binary,Chmod(str(binary),0o755))

######################################################################
# SELF-DOCUMENTATION
######################################################################
if root:
    user = os.path.basename(os.getcwd())
    main = 'sf%s.py' % user

    docs = [env.Doc(prog,'M' + prog) for prog in mains+mpi_mains] + \
           [env.Doc(prog,'M'+prog+'.py',lang='python') for prog in pymains]
    env.Depends(docs,'#/framework/rsf/doc.py')
    doc = env.RSF_Docmerge(main,docs)
    env.Install(pkgdir,doc)
